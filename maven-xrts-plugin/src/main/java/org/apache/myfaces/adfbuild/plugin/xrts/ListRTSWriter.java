/*
* Copyright 2006 The Apache Software Foundation.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.apache.myfaces.adfbuild.plugin.xrts;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Dictionary;
//import java.util.StringTokenizer;


/**
 * The <code>ListRTSWriter</code> class is an implementation of the
 * <code>RTSWriter</code> interface used to create a Sun
 * <code>ListResourceBundle</code> file.
 *
 * @version $Name:  $ ($Revision: 1.11 $) $Date: 2002/02/27 17:18:47 $
 * @author Craig R. Cummings
 * @since RTS 2.0
 */
public class ListRTSWriter implements RTSWriter
{

  /**
   * Empty constructor for the <code>ListResourceBundle</code> implementation
   *
   */
  public ListRTSWriter()
  {
  }

  /**
   * <code>RTSWriter</code> method implementation to write the header of the
   * <code>ListResourceBundle</code> file.
   *
   * @param parms a <code>Dictionary</code> of command line parameters.
   * @param meta a <code>Dictionary</code> of parsed non-resource data
   * (e.g., authors).
   */
  public void startBundle(Dictionary parms, Dictionary meta)
    throws Throwable
  {
    File outFile = (File)parms.get("outFile");
    String outName = (String)parms.get("outName");
    String srcName = (String)parms.get("srcName");

    Boolean b = (Boolean)parms.get("quietMode");
    boolean quietMode = b.booleanValue();
    if (!quietMode)
    {
      System.out.println("  " + outFile);
    }

    _pw = new PrintWriter(new BufferedWriter(new FileWriter(outFile)));

    _pw.println("// Do not edit this file!");
    _pw.println("// This file has been automatically generated.");

    String rtsFileType = "xrts";
    if (meta != null)
      rtsFileType = (String)meta.get("fileType");
    _pw.println("// Edit " + srcName + "." + rtsFileType + " and run the " +
      rtsFileType.toUpperCase() + "MakeBundle tool instead.");
    _pw.println("// ");

    String packageName = (String)parms.get("pkgName");
    if (packageName == null)
      if (meta != null)
        if (meta.get("package") != null)
          packageName = (String)meta.get("package");

    if (packageName != null &&
      (!packageName.equals("") || !packageName.trim().equals("")))
    {
      _pw.println("package " + packageName + ";");
      _pw.println("");
    }

    _pw.println("import java.util.ListResourceBundle;");

    writeImports(parms, meta);

    _pw.println("");
    _pw.println("public class " + outName + " extends ListResourceBundle {");
    _pw.println("  public Object[][] getContents() {");
    _pw.println("    return contents;");
    _pw.println("  }");
    _pw.println("");
    _pw.println("  static final Object[][] contents = {");
  }

  protected void writeImports(Dictionary parms, Dictionary meta)
     throws Throwable
  {
  }

  public void writeString(Dictionary parms, Dictionary meta, String key,
    String value, Dictionary attr) throws Throwable
  {
    _pw.println("    {\"" + UnicodeEscapes.convert(key) + "\", \"" +
                UnicodeEscapes.convert(value) + "\"},");

// Comments can be preserved with RTS.  The commented out code below
// was for demonstrating that this worked properly.  As comments are
// not required in the ListResourceBundle, this code is here only to guide
// developers in their RTSWriter interface implementation.
//      String comments = rts.getComment(key);
//      if (comments.length() > 0 )
//      {
//        StringTokenizer st = new StringTokenizer(comments, "\n");
//        while (st.hasMoreTokens())
//          _pw.println("// " + st.nextToken());
//      }

  }


  public void writeStringArray(Dictionary parms, Dictionary meta, String key,
   String[] strArr, Dictionary[] attrs) throws Throwable
  {
    _pw.println("    {\"" + key + "\",");
    _pw.println("       new String[] {");

    for (int i = 0; i < (strArr.length - 1); i++)
      _pw.println("           \"" + UnicodeEscapes.convert(strArr[i]) + "\",");
    // the last line of the string array shouldn't have a comma

    _pw.println("           \"" +
                UnicodeEscapes.convert(strArr[strArr.length-1]) + "\"");
    _pw.println("       }");
    _pw.println("    },");
  }

  public void writeDictionary(Dictionary parms, Dictionary meta, String key,
    Dictionary kvps, Dictionary attrs) throws Throwable
  {
    System.err.println("Dictionary \'" + key + "\' was found in XML-based " +
      "RTS, but is not supported by ListResourceBundle.  Use XRTSMakeBundle " +
      "subkey instead.");
  }

  /**
   * <code>RTSWriter</code> method implementation to close the file stream
   * required for the <code>ListResourceBundle</code>.  Before closing, this
   * method also writes the footer portions of the file.  The footer portions
   * consist of little more than closing braces.
   *
   * @param meta a <code>Dictionary</code> of parsed non-resource data
   * (e.g., authors).
   */
  public void endBundle(Dictionary parms, Dictionary meta) throws Throwable
  {
    _pw.println("  };");
    _pw.println("}");
    _pw.close();
  }

  protected PrintWriter getOut()
  {
    return _pw;
  }

  private PrintWriter _pw;
}
