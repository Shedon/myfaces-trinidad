<?xml version = "1.0" ?>
<!--
  Copyright 2006 The Apache Software Foundation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE taglib 
   PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"
          "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">
<taglib>
  <tlib-version>11-m3</tlib-version>
  <jsp-version>1.2</jsp-version>
  <short-name>tr</short-name>
  <uri>http://myfaces.apache.org/trinidad</uri>
  <display-name>Apache Trinidad Core</display-name>    
        
    <tag>
      <name>attribute</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.AttributeTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The Attribute tag adds a property with the specified name and value 
        to the component associated with the parent tag.  It behaves the same
        as the JSF Attribute tag except that it creates a value binding for 
        expressions instead of immediately evaluating it.  
      </description>
      <attribute>
        <name>name</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the name of the attribute
        </description>
      </attribute>
      <attribute>
        <name>value</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the value of the attribute
        </description>
      </attribute>
    </tag>
    

    <tag>
      <name>validator</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ValidatorTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The Validator tag adds a new validator instance to the component
        associated with the parent tag. The new validator instance is found
        by evaluating a binding expression, or looking up a validator ID.
        This implements the JSF 1.2 definition of &lt;f:validator&gt;.
      </description>
      <attribute>
        <name>validatorId</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the ID of a validator instance registered in faces-config.xml
        </description>
      </attribute>
      <attribute>
        <name>binding</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the value binding expression to a property that returns a
          ValidatorInstance.
        </description>
      </attribute>
    </tag>        

   <tag>
      <name>forEach</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ForEachTag</tag-class>
      <description>
The forEach tag is a replacement for the JSTL &amp;lt;c:forEach&amp;gt; tag
                that works with Apache Trinidad components.  Today, &amp;lt;c:forEach&amp;gt; cannot
                be used with any JSF components or tags.  This tag brings that functionality
        to JSF, but it is limited to Apache Trinidad tags. This tag also has several limitations not found in &amp;lt;c:forEach&amp;gt;:
        &lt;ul&gt;
        &lt;li&gt;&amp;lt;af:forEach&amp;gt; does not currently support scenarios where the size of the "items" list or array changes from one request to the next. It may be possible to work around this in specific scenarios by manually deleting all children of the parent component (&amp;lt;af:selectOneListbox&amp;gt; in the above example), but this has not yet been tested.&lt;/li&gt;
        &lt;li&gt;&amp;lt;af:forEach&amp;gt; does not support arbitrary java.util.Collections; it can only iterate over java.util.Lists or arrays.&lt;/li&gt;
        &lt;li&gt;&amp;lt;af:forEach&amp;gt; executes at the time the JSP tag executes. So it 
        does not have access to any EL variables that are created by JSF components.
        For example, the &amp;lt;af:table&amp;gt; creates an EL variable using the value of
        the "var" attribute. However, this EL variable is not available 
to &amp;lt;af:forEach&amp;gt;     
        &lt;/li&gt;
        &lt;/ul&gt;
      </description>

      <attribute>
        <name>items</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the items over which iteration takes place 
        </description>
      </attribute>

      <attribute>
        <name>var</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the name of the variable to expose
        </description>
      </attribute>

      <attribute>
        <name>varStatus</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          Name of the exported scoped variable for the
          status of the iteration.
        </description>
      </attribute>

      <attribute>
        <name>begin</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the beginning index 
        </description>
      </attribute>

      <attribute>
        <name>end</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the ending index 
        </description>
      </attribute>

      <attribute>
        <name>step</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the number of steps per iteration
        </description>
      </attribute>

   </tag>

   <tag>
      <name>setActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.SetActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The setActionListener tag provides a declarative syntax for assigning values before an action fires
      </description>

      <attribute>
        <name>to</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the target for the value;  must be an EL expression
        </description>
      </attribute>

      <attribute>
        <name>from</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the source of the value;  can be an EL expression or a constant value
        </description>
      </attribute>
   </tag>

   <tag>
      <name>returnActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.ReturnActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The returnActionListener tag is a declarative way to allow an action source to return 
        a value from a dialog or process.
      </description>

      <attribute>
        <name>value</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          The value to return as the dialog/process result.
          This can be an EL expression or a constant value.
        </description>
      </attribute>
   </tag>


   <tag>
      <name>resetActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.ResetActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The resetActionListener tag provides a declarative syntax for resetting values before an action fires
      </description>
   </tag>
 
   <tag>
      <name>componentRef</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ComponentRefTag</tag-class>
      <description> 

      The componentRef tag adds declarative components onto the current
      component tree. The declarative component is usually defined in a jsp
      file.  It is currently experimental and should not be used by
      developers.

      </description>

      <attribute>
        <name>componentType</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
Identifies which declarative component to use. 
All the available components must be
declared in a region-metadata.xml file.
        </description>
      </attribute>

      <attribute>
        <name>id</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          This ID must be unique within this page. 
        </description>
      </attribute>

      <attribute>
        <name>value</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          A value to pass to the component definition.
        </description>
      </attribute>

      <attribute>
        <name>rendered</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          Whether or not this component is rendered.
        </description>
      </attribute>

   </tag>


    <tag>
      <name>componentDef</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ComponentDefTag</tag-class>
      <description>
        The componentDef tag is used to define a component. Its primary purpose
is defining a "var" property so that the definition can refer to attributes
on this component's usage.
      </description>
      <attribute>
        <name>var</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the variable name to use when referencing attributes, that may be set
          on this new component.
        </description>
      </attribute>
    </tag>        


    <tag>
      <name>facetRef</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.FacetRefTag</tag-class>
      <description>
        The facetRef tag is used to copy facets from a component
        and paste them into its
        definition. This tag may only be used within an &lt;af:componentDef&gt;
        tag.
        Each facet may be used only once within each 
        &lt;af:componentDef&gt;. In other words, a single facet cannot be
        used more than once.
      </description>
      <attribute>
        <name>facetName</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the facet name to copy
        </description>
      </attribute>
    </tag>        

</taglib>
