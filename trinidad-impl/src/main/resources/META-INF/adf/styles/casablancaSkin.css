/*
 * CassaBlanca skin (and it's approach)
 * was designed and implemented by ADONIS RADUCA,
 * under the effort to give a new, more modern, look to the Trinidad library.
 * Other notable effort comes from:
 * CATALIN KORMOS
 * COSMIN MARTINCONI
 * They have an important and decisive role along the entire project.
 */

/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */


/* ------------------------------------------------------------------------------------------------------------------ */
/* ABOUT CASABLANCA SKINING APPROACH
/*
/* GENERAL DESCRIPTION:
/* The scope of CASABLANCA SKINING PLATFORM is to add a new modern visual
/* touch and to introduce a new and more pleasurable way of skinning Trinidad
/* components. We have a completely new styling selectors stack for hiding
/* the already existing naming inconsistency. In that order this new stack has
/* coherent naming rules for the selectors and a clear and simple hierarchy.
/*
/* CASABLANCA STYLING STACK:
/* Casablanca layers stack:
/* GENERIC LAYER
/*    GENERAL LOOK LAYER
/*    BASIC CONTROLS LAYER
/*    COMPLEX CONTROLS LAYER
/* COMPONENTS STYLING LAYER
/*    CASABLANCA SELECTORS LAYER
/*    CASABLANCA INJECTION LAYER
/* 
/* The CASABLANCA SELECTORS STACK has two main layers:
/* - The first one is the GENERIC LAYER – on that layer we have generic styles
/*   that we use everywhere. This is the level where we made changes
/*   (in most of part) when we want to made another color scheme for the skin
/*   or to build another skin based on it.
/* - The second layer is the COMPONENTS STYLING LAYER – this layer define styles
/*   for each component individually based on generic styles. We will make changes 
/*   at this layer if we intent to fine-tune the components aspect.
/*
/* The first layer provide a higher lever of abstraction, this is a convenient way
/* if we plan to make massive changes to the components aspect. This layer has its
/* own 3 sub-layers:
/* - GENERAL LOOK LAYER, define the visual aspect at the most generic level.
/*   We have here some very basic graphical properties that serve as composition
/*   elements later for defining controls. Each generic style address a specific
/*   graphical aspect like: rounded-corners look, borders look, text and headings
/*   look, button look and so on. In that order we have selectors like:
/*   .CBBorderSolidLook:alias, .CBDefaultFontLook:alias, .CBHeaderLevel1Look:alias,
/*   .CBLinkLook:alias, .CBButtonLook:alias ans so on. All styles are prefixed
/*   by “.CB” which means is a Casablanca style and all are postfixed by “:alias”
/*   that means is a generic style.
/* - BASIC CONTROLS LAYER, define the full graphic aspect of the basic controls
/*   using general look layer styles. We have here controls like: link, button,
/*   checkbox, radio-button, listbox and so on.
/* - COMPLEX CONTROLS LAYER, define the full graphic aspects of the complex
/*   controls based on styles defined at the simple controls layer level. In that
/*   order we have controls like: accordion, table, tree, shuttle, button bar
/*   and so on.
/*
/* NOTE: In general is better at a specific layer to use style defined in the
/*       layer immediately below it. There are also situations when we need to use
/*       directly a more generic style when we don’t have alternative, but in general
/*       is better to use the layer immediately below.
/*
/* The second layer introduces another level of abstraction, for decoupling reasons.
/* In that order we have 2 sub-layers at this level:
/* - First layer is the CASABLANCA SELECTORS LAYER, this layer define specific 
/*   formatting for each Trinidad component based on first level styles from basic
/*   and complex controls layers. In almost all cases we have there styles that use
/*   directly selectors from the controls layers, only in some specific cases we
/*   add a custom look by overwriting or adding some extra stuff. So this layer made
/*   the connection between the Casablanca generic controls and true Trinidad components
/*   and here is the place for adding a custom look for a specific component.
/* - Second layer is the CASABLANCA INJECTION LAYER where we actually made the
/*   “conversion” between Casablanca and standard Trinidad skinning selectors.
/*   In almost all cases we don’t need to make any change at this level. The scope
/*   of this layer is only to “translate” between two type of skinning selectors in
/*   order to hide the naming inconsistency in Trinidad skinning selectors and where
/*   is possible the lack of uniformity in the output markup.
/*
/* CASABLANCA STYLES NAMING CONVENTION:
/* In the Casablanca terminology, any entity (generic graphical property, Casablanca
/* control or Trinidad component) where a style is applied is named a styled-entity.
/* So each style selector is addressed to a specific styled-entity.
/* Each style selector name must be conforming to the Casablanca styles naming rule:
/*
/* .CBName1Name2…NameXType1Type2…TypeXPurposeState1State2…StateX:alias
/*
/* .CB – from Casablanca prefixes any style selector, so it’s a required field.
/* Name1    – the name of the styled-entity, required field.
/* Name2    – the second name is the name of styled-sub-entity, not required. We can have
/*            as many sub-entity levels as we want.
/* Type1    – the type of the styled-entity, not required.
/* Type2    – the second type of the styled entity, not required. We can have as many types
/*            as we want.
/* Purpose  – the purpose of the styled-entity, not required.
/* State1   – the state of the styled-entity, not required.
/* State2   – the second state of the styled-entity, not required. We can also have as many
/*            states as we want.
/*
/* EXAMPLES :
/* .CBLinkLookHover:alias
/* Link     – styled-entity name
/* Look     – styled-entity purpose
/* Hover    – styled-entity State
/* So we have a link-look generic selector in the hover state.
/*
/* .CBPanelHeadSelectedHover:alias
/* Panel    – styled-entity name.
/* Head     – styled-sub-entity name.
/* Selected – styled-entity state.
/* Hover    – another styled-entity state.
/* We have the head of the panel complex control selector in the selected-hover state.
/*
/* .CBBorderStrongSolidLook:alias
/* Border   – styled-entity name
/* Strong   – styled-entity type
/* Solid    – another styled-entity type
/* We have a strong-solid-look border generic selector.
/*
/*
/* ENJOY SKINNING !
/* ------------------------------------------------------------------------------------------------------------------ */


/* ------------------------------------------------------------------------------------------------------------------ */
/* Casablanca General Selectors                                                                                       */
/* ------------------------------------------------------------------------------------------------------------------ */
/* Basic aspect selectors like:
/* - corners look
/* - border look
/* - font look
/* - link look
/* - button look
/* - text-cell look
/* - icon look 
/* ------------------------------------------------------------------------------------------------------------------ */

/* Rounded corners -------------------------------------------------------------------------------------------------- */
/*   Define styles used in:
/* - buttons
/* - nevigation stuff
/* - accordions
/* - pannels
/* ------------------------------------------------------------------------------------------------------------------ */

@import "casablanca-base.css";

af|breadCrumbs af|breadCrumbs::step:hover {
    -tr-rule-ref: selector(".CBBreadcrumbStepHover:alias");
}
af|chooseDate::content tr td a:hover {
    -tr-rule-ref: selector(".CBDateCellHover:alias");
    border: none;
    display: block;
}
af|chooseDate::content tr af|chooseDate::disabled:hover {
    -tr-rule-ref: selector(".CBDateCellDisabled:alias");
}
af|chooseDate::nav[align="left"] a:hover {
    -tr-rule-ref: selector(".CBDateNavPrevMonthHover:alias");
}
af|chooseDate::nav[align="right"] a:hover {
    -tr-rule-ref: selector(".CBDateNavNextMonthHover:alias");
}
af|commandButton:hover, af|goButton:hover, af|resetButton:hover, button:hover, button.OraLink:hover,
.OraNavBarActiveLink:hover {
    -tr-rule-ref: selector(".CBCommandButtonHover:alias");
}
a:hover, .OraLink:hover, .OraLink:link:hover {
    -tr-rule-ref: selector(".CBCommandLinkHover:alias");
}
.OraLinkDisabled:hover {
    -tr-rule-ref: selector(".CBCommandLinkDisabledHover:alias");
}
af|goButton:hover {
    -tr-rule-ref: selector(".CBGoButtonHover:alias");
}
af|inputColor a:hover .p_OraColorFieldSwatch {
    -tr-rule-ref: selector(".CBInputColorCurrentColorHover:alias");
}
af|inputDate a:hover {
    -tr-rule-ref: selector(".CBInputDateIconHover:alias");
}
af|inputListOfValues a:hover {
    -tr-rule-ref: selector(".CBListOfValuesIconHover:alias");
}
af|navigationPane::bar-active-enabled af|navigationPane::bar-content a:hover {
    -tr-rule-ref: selector(".CBNavPaneBarOptionSelectedHover:alias");
}
af|navigationPane::bar-inactive-enabled af|navigationPane::bar-content a:hover {
    -tr-rule-ref: selector(".CBNavPaneBarOptionHover:alias");
}
af|navigationPane::buttons-inactive-enabled af|navigationPane::buttons-content a:hover {
    -tr-rule-ref: selector(".CBNavPaneButtonOptionHover:alias");
}
af|navigationPane::buttons-active-enabled af|navigationPane::buttons-content a:hover {
    -tr-rule-ref: selector(".CBNavPaneButtonOptionSelectedHover:alias");
}
af|navigationPane::list-inactive-enabled af|navigationPane::list-content a:hover {
    -tr-rule-ref: selector(".CBNavPaneListOptionHover:alias");
}
af|navigationPane::list-active-enabled af|navigationPane::list-content a:hover {
    -tr-rule-ref: selector(".CBNavPaneListOptionSelectedHover:alias");
}
af|navigationPane af|navigationPane::choice-button:hover {
    -tr-rule-ref: selector(".CBNavPaneChoiceButtonHover:alias");
}
af|navigationPane::tabs-inactive af|navigationPane::tabs-mid a:hover {
    -tr-rule-ref: selector(".CBNavPaneTabsHover:alias");
}
af|navigationPane::tabs-active af|navigationPane::tabs-mid a:hover {
    -tr-rule-ref: selector(".CBNavPaneTabsSelectedHover:alias");
}
af|navigationPane::tabs .p_AFDisabled af|navigationPane::tabs-mid:hover {
    -tr-rule-ref: selector(".CBNavPaneTabsDisabledHover:alias");
}
.p_OraTreeRow a:hover,
.p_OraTreeRow a:link:hover,
.p_OraTreeRow a:active:hover,
.p_OraTreeRow a:visited:hover,
.p_OraTreeRowSelected a:hover,
.p_OraTreeRowSelected a:link:hover,
.p_OraTreeRowSelected a:active:hover,
.p_OraTreeRowSelected a:visited:hover,
.p_OraTreeRow a.OraLink:hover,
.p_OraTreeRowSelected a.OraLink:hover {
    -tr-rule-ref: selector(".CBNavigationTreeLinkHover:alias");
}
.p_OraTreeDisclosedSymbol a:hover,
.p_OraTreeDisclosedSymbol a:link:hover,
.p_OraTreeDisclosedSymbol a:active:hover,
.p_OraTreeDisclosedSymbol a:visited:hover,
.p_OraTreeDisclosedSymbol a.OraLink:hover {
    -tr-rule-ref: selector(".CBNavigationTreeExpandCollapseItemHover:alias");
}
.p_OraTreeDisclosedSymbol .OraLinkDisabled:hover,
.p_OraTreeRow .OraLinkDisabled:hover,
.p_OraTreeRowSelected .OraLinkDisabled:hover {
    -tr-rule-ref: selector(".CBNavigationTreeLinkDisabledHover:alias") ;
}
af|panelAccordion::header-collapsed af|panelAccordion::title-link:hover {
    -tr-rule-ref: selector(".CBAccordionPanelHeadHover:alias");
}
af|panelAccordion::header-expanded af|panelAccordion::title-link:hover {
    -tr-rule-ref: selector(".CBAccordionPanelHeadSelectedHover:alias");
    margin-bottom: 0;
}
af|panelAccordion::header-expanded af|panelAccordion::title-link:hover .p_OraHideShowDisclosedSymbol {
    -tr-rule-ref: selector(".CBIconLookSelectedHover:alias");
    -tr-rule-ref: selector(".CBIconArrowUp:alias");
}
af|panelAccordion::header-disabled af|panelAccordion::title-disabled-link:hover {
    -tr-rule-ref: selector(".CBAccordionPanelHeadDisabledHover:alias");
}
af|panelButtonBar af|commandButton:hover {
    -tr-rule-ref: selector(".CBPanelButtonBarButtonHover:alias");
}
af|panelTabbed::orientation-top af|panelTabbed::tab a:hover {
    -tr-rule-ref: selector(".CBPanelTabTopHover:alias");
}
af|panelTabbed::orientation-top af|panelTabbed::tab-selected a:hover {
    -tr-rule-ref: selector(".CBPanelTabTopSelectedHover:alias");
}
af|panelTabbed::orientation-top af|panelTabbed::tab a.p_OraDisabled:hover {
    -tr-rule-ref: selector(".CBPanelTabTopDisabledHover:alias");
}
af|panelTabbed::orientation-bottom af|panelTabbed::tab a:hover {
    -tr-rule-ref: selector(".CBPanelTabBottomHover:alias");
}
af|panelTabbed::orientation-bottom af|panelTabbed::tab-selected a:hover {
    -tr-rule-ref: selector(".CBPanelTabBottomSelectedHover:alias");
}
af|panelTabbed::orientation-bottom af|panelTabbed::tab a.p_OraDisabled:hover {
    -tr-rule-ref: selector(".CBPanelTabBottomDisabledHover:alias");
}
af|resetButton:hover {
   -tr-rule-ref: selector(".CBResetButtonHover:alias");
}
af|selectManyShuttle a.OraLink:hover {
    -tr-rule-ref: selector(".CBSelectManyShuttleButtonHover:alias");
}
af|selectOrderShuttle::box-content a:hover {
    -tr-rule-ref: selector(".CBSelectOrderShuttleButtonHover:alias");
}
h1.af|showDetailHeader af|showDetail::disclosure-icon-link:hover,
h1.af|showDetailHeader af|showDetail::disclosure-icon-link span:hover {
    -tr-rule-ref: selector(".CBShowDetailHeaderExpandCollapseItemHover:alias");
}
af|showDetail::prompt-undisclosed af|showDetail::disclosure-icon-link:hover,
af|showDetail::prompt-disclosed af|showDetail::disclosure-icon-link:hover {
    -tr-rule-ref: selector(".CBShowDetailExpandCollapseItemHover:alias");
}
af|showDetail::prompt-undisclosed af|showDetail::prompt-link:hover,
af|showDetail::prompt-disclosed af|showDetail::prompt-link:hover {
    -tr-rule-ref: selector(".CBShowDetailTitleHover:alias");
}
af|singleStepButtonBar af|commandButton:hover {
    -tr-rule-ref: selector(".CBSingleStepButtonBarButtonHover:alias");
}
.p_AFSelected af|train::link:hover {
    -tr-rule-ref: selector(".CBTrainTrainStopSelectedHover:alias");
}
.p_AFVisited af|train::link:hover {
    -tr-rule-ref: selector(".CBTrainTrainStopVisitedHover:alias");
}
.p_AFUnvisited af|train::link:hover {
    -tr-rule-ref: selector(".CBTrainTrainStopUnvisitedHover:alias");
}
af|table::sub-control-bar .OraLink:hover,
af|table::sub-control-bar af|showDetail::prompt-link:hover {
    -tr-rule-ref: selector(".CBTableBarButtonHover:alias");
}
af|table::sub-control-bar .OraNavBarActiveLink:hover,
af|table::sub-control-bar af|showDetail::prompt-link:hover {
    -tr-rule-ref: selector(".CBTableBarButtonHover:alias");
}
af|treeTable::sub-control-bar .OraNavBarActiveLink:hover,
af|treeTable::sub-control-bar af|showDetail::prompt-link:hover {
    -tr-rule-ref: selector(".CBTreeTableBarButtonHover:alias");
}
