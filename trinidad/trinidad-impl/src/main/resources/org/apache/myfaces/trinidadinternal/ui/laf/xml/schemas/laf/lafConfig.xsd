<?xml version="1.0" encoding="windows-1252"?>
<!--
  Copyright 2006 The Apache Software Foundation.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns="http://www.w3.org/2001/XMLSchema"
            xmlns:skin="http://myfaces.apache.org/trinidad/skin"
            xmlns:cabotool="http://myfaces.apache.org/trinidad/cabo/tool"
            xmlns:html="http://www.w3.org/TR/REC-html40"
            targetNamespace="http://myfaces.apache.org/trinidad/skin"
            elementFormDefault="qualified">
  <xsd:element name="skins" type="skin:skinsType">
    <xsd:annotation>
      <xsd:documentation>
        <cabotool:summary>
          The root element defined in the trinidad-skins document.
        </cabotool:summary>
        <cabotool:description>
          <html:p>
            The root element in the trinidad-skins configuration file. The
            trinidad-skins configuration files define all of the properties of
            custom skins.
          </html:p>
        </cabotool:description>
        <cabotool:example>
          <html:p>
            The following sample shows how to define a custom skin which extends
            the Minimal Desktop skin. The custom skin specifies a custom style
            sheet.
          </html:p>
          <cabotool:sampleCode>
            &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; &lt;skins&gt;
            &lt;!-- A custom skin --&gt; &lt;skin
            xmlns="http://myfaces.apache.org/trinidad/skin"&gt; &lt;id&gt;
            custom.desktop &lt;/id&gt; &lt;family&gt; custom &lt;/family&gt;
            &lt;style-sheet-name&gt; custom.xss &lt;/style-sheet-name&gt;
            &lt;/skin&gt; &lt;/skins&gt;
          </cabotool:sampleCode>
        </cabotool:example>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="skinsType">
    <xsd:sequence>
      <xsd:element name="skin" maxOccurs="unbounded" minOccurs="0"
                   type="skin:skinType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines a skin.
            </cabotool:summary>
            <cabotool:description>
              <html:p/>
            </cabotool:description>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="skinType">
    <xsd:sequence>
      <xsd:element name="icons" minOccurs="0" maxOccurs="unbounded"
                   type="skin:iconsType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines the icons for the custom skin.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                By default, the custom skin inherits the icons that are
                provided by the its parent skin. The custom look and
                feel can override any customizable icons defined by the parent
                skin by adding
                <html:code>
                  &lt;icon&gt;
                </html:code>
                entries to the
                <html:code>
                  &lt;icons&gt;
                </html:code>
                section of the skin configuration file.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows a custom skin which
                overrides two icons: one with a context-image icon and another
                with a uri-image icon.
              </html:p>
              <cabotool:sampleCode>
                &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; &lt;!-- A
                custom skin that extends the Simple Desktop Look And
                Feel --&gt; &lt;look-and-feel
                xmlns="http://myfaces.apache.org/trinidad/skin" id="custom.desktop"
                family="custom" extends="simple.desktop"&gt; &lt;!-- Define some
                custom icons --&gt; &lt;icons&gt; &lt;!-- Replace the error icon
                with a context-relative icon. --&gt; &lt;icon
                name="error"&gt;
                &lt;context-image uri="images/skin/custom/error.gif"/&gt;
                &lt;/icon&gt; &lt;!-- Replace the warning icon with a fully
                specified URI icon --&gt; &lt;icon  name="warning"&gt;
                &lt;uri-image uri="/webapp/skin/custom/warning.gif"/&gt;
                &lt;/icon&gt; &lt;/icons&gt; &lt;/look-and-feel&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="bundle-name" minOccurs="0" maxOccurs="1"
                   type="string">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary> 
              Name of the bundle for this skin.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                By default, the custom skin inherits the translations
                that are provided by the its parent skin. The custom
                skin can override any customizable message by defining
                its own
                <html:code>
                  ResourceBundles
                </html:code>
                .</html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows a custom skin which
                provides its own ResourceBundle:
              </html:p>
              <cabotool:sampleCode>
  &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
  &lt;!-- A custom skin that extends the Simple Desktop Look And Feel --&gt;
  &lt;look-and-feel xmlns="http://myfaces.apache.org/trinidad/skin"
         id="custom.desktop" family="custom" extends="simple.desktop"&gt;
    &lt;!-- Register a custom ResourceBundle --&gt;
    &lt;bundle-name&gt;
      org.example.skin.custom.resource.CustomBundle
    &lt;/bundle-name&gt;
  &lt;/look-and-feel&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="properties" minOccurs="0" maxOccurs="1"
                   type="skin:propertiesType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines the properties for the custom skin.
            </cabotool:summary>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="id" type="string" minOccurs="1" maxOccurs="1">
        <xsd:annotation>
          <xsd:documentation>
            A string identifier which uniquely identifies this custom skin
            implementation.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="family" type="string" minOccurs="1" maxOccurs="1">
        <xsd:annotation>
          <xsd:documentation>
            A name which identifies the skin family to which this skin
            implementation belongs.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <!--xsd:attribute name="extends" use="required" type="string">
      <xsd:annotation>
        <xsd:documentation>
          The id of the parent skin which this custom look
          and feel extends.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute-->
      <xsd:element name="style-sheet-name" type="anyURI">
        <xsd:annotation>
          <xsd:documentation>
            <html:p>
              The name of the style sheet which defines the styles for this
              custom skin.</html:p>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="iconsType">
    <xsd:sequence>
      <xsd:element name="icon" maxOccurs="unbounded" type="skin:iconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines a single custom icon.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  icon
                </html:code>
                element registers an icon that is provided by the skin. Each
                <html:code>
                  icon
                </html:code>
                element contains a single child element, which must be one of
                the following icon element types:
              </html:p>
              <html:ul>
                <html:li>
                  context-image: An image icon where the image URI is specified
                  relative to the servlet context root.
                </html:li>
                <html:li>
                  uri-image: An image icon where a full image URI is specified.
                </html:li>
                <html:li>
                  config-image: An image icon where a image URI is specified
                  relative to the Configuration.IMAGES_DIRECTORY.
                </html:li>
                <html:li>
                  resource-image: An image icon where the image is loaded off of
                  the class path using
                  <html:code>
                    ClassLoader.getResource()
                  </html:code>
                  .
                </html:li>
              </html:ul>
              <html:p>
                Only one of the above elements may be specified for each
                &lt;html:code&gt;icon&gt; entry.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows two
                <html:code>
                  icon
                </html:code>
                elements: one which registers a context-relative icon and
                another which registeres a full URI icon.
              </html:p>
              <cabotool:sampleCode>
                &lt;icon name="ui:error"&gt; &lt;context-image
                uri="images/skin/custom/error.gif"/&gt; &lt;/icon&gt; &lt;!--
                Replace the warning icon with a fully specified URI icon --&gt;
                &lt;icon name="ui:warning"&gt; &lt;uri-image
                uri="/webapp/skin/custom/warning.gif"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="propertiesType">
    <xsd:sequence>
      <xsd:element name="property" maxOccurs="unbounded"
                   type="skin:propertyType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines a single custom property.
            </cabotool:summary>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="iconType">
    <xsd:choice>
      <xsd:element name="context-image" type="skin:imageIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines a context-relative image icon.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  context-image
                </html:code>
                element registers an image icon which is specified using a
                context-relative URI. The servlet context path will
                automatically be prepended to the URI specified via the
                <html:code>
                  uri
                </html:code>
                attribute.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows how to register a context-relative
                image icon.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the error icon with a context-relative icon. --&gt;
                &lt;icon name="ui:error"&gt;
                <!-- The context URI will be prepended to the
                       uri attribute value.  So, assuming that the
                       context URI is "/webapp/", the URI that will
                       be used to reference this icon is:
                       "/webapp/images/skin/custom/error.gif" -->
                &lt;context-image uri="images/skin/custom/error.gif"/&gt;
                &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="uri-image" type="skin:imageIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines an image icon which is referenced via a full URI.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  uri-image
                </html:code>
                element registers an image icon which is specified using a full
                URI.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows how to register an image icon with a
                full URI.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the warning icon with a fully specified URI icon
                --&gt; &lt;icon name="ui:warning"&gt; &lt;uri-image
                uri="/webapp/skin/custom/warning.gif"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="config-image" type="skin:imageIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines an image icon with a URI that is relative to the
              Configuration.IMAGES_DIRECTORY URI.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  config-image
                </html:code>
                element registers an image icon using a URI that is relative to
                the Configuration.IMAGES_DIRECTORY. The URI of the
                Configuration.IMAGES_DIRECTORY (typically "/cabo/images/") will
                automatically be prepended to the URI specified via the
                <html:code>
                  uri
                </html:code>
                attribute.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows how to register an image icon with a
                URI that is relative to the IMAGES_DIRECTORY.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the tip icon with a context-relative icon. --&gt;
                &lt;icon name="ui:tip"&gt;
                <!-- The IMAGES_DIRECTORY URI will be prepended to the
                       uri attribute value.  So, assuming that the
                       context URI is "/cabo/images/", the URI that will
                       be used to reference this icon is:
                       "/cabo/images/skin/custom/tip.gif" -->
                &lt;config-image uri="skin/custom/tip.gif"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="resource-image" type="skin:imageIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines an image icon that is loaded as a resource from the class
              path.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  resource-image
                </html:code>
                element registers an icon that is loaded from the class path
                using
                <html:code>
                  ClassLoader.getResource()
                </html:code>
                . Unlike the other icon types (context-image, uri-image,
                etc...), resource image icons do not need to be installed as a
                loose file in the web application. Instead, resource image icons
                can be packaged inside of JAR file and loaded directly from the
                class path.
              </html:p>
              <html:p>
                The
                <html:code>
                  uri
                </html:code>
                attribute must be the path to an image file that is available on
                the class path.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows how to register a resource image icon.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the error icon with a resource image icon. --&gt;
                &lt;icon name="ui:error"&gt;
                <!-- The following icon will be retrieved from the
                       class path using the uri attribute value. -->
                &lt;resource-image
                uri="org/example/skin/custom/images/error.gif"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="text" type="skin:textIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines a text-based icon.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  text
                </html:code>
                element registers a text-based icon.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows how to register a text icon.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the required icon with a text icon. --&gt;
                &lt;icon name="ui:required"&gt;
                <!-- The following icon will be retrieved from the
                       class path using the uri attribute value. -->
                &lt;text text="*"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="instance" type="skin:instanceIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Registers a Java Icon instance.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  instance
                </html:code>
                element registers a Java Icon instance. The instance can be
                retrieved from a static function, allowing for singletons, or
                directly instantiated.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                In the following example, the public static method
                test.IconUtils.getRequiredIcon() is called (at parse time). This
                method must take no arguments and must return an
                org.apache.myfaces.trinidadinternal.ui.skin.icon.Icon instance.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the required icon with a text icon. --&gt;
                &lt;icon name="ui:required"&gt; &lt;instance
                class="test.IconUtils" method="getRequiredIcon"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
              <html:p>
                In the following example, the public static method
                test.IconUtils.sharedInstance() is called (at parse time). This
                method must take no arguments and must return an
                org.apache.myfaces.trinidadinternal.skin.icon.Icon instance.
              </html:p>
              <cabotool:sampleCode>
                &lt;!-- Replace the required icon with a text icon. --&gt;
                &lt;icon name="ui:required"&gt; &lt;instance
                class="test.IconUtils"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
              <html:p>
                In the above example, if the method sharedInstance() does not
                exist, than an instance of the above class will be constructed
                by calling a public no-arg constructor. This class must be of
                type org.apache.myfaces.trinidadinternal.skin.icon.Icon.
              </html:p>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="null" type="skin:nullIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Registers a null Icon.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  null
                </html:code>
                element registers a null Icon. This null Icon element is used to
                indicate that no content should be rendered.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                In the following example, the null Icon is used to indicate that
                the af|selectInputColor::swatch-overlay-icon Icon should not be
                rendered.
              </html:p>
              <cabotool:sampleCode>
                &lt;icon name="af|selectInputColor::swatch-overlay-icon"&gt;
                &lt;null/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="reference" type="skin:referenceIconType">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              Defines a reference to an icon.
            </cabotool:summary>
            <cabotool:description>
              <html:p>
                The
                <html:code>
                  reference
                </html:code>
                element registers a reference to an icon.
              </html:p>
            </cabotool:description>
            <cabotool:example>
              <html:p>
                The following sample shows how to register a reference icon.
              </html:p>
              <cabotool:sampleCode>
                &lt;icon name="tabStartEnabled"&gt; &lt;reference
                name="someOtherIcon"/&gt; &lt;/icon&gt;
              </cabotool:sampleCode>
            </cabotool:example>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:choice>
    <xsd:attribute name="name" use="required" type="string">
      <xsd:annotation>
        <xsd:documentation>
          The name of the icon to replace, eg. "error", "info",
          etc...
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="imageIconType">
    <xsd:sequence minOccurs="0">
      <xsd:element ref="skin:inlineStyle" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The inline style for the icon.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="uri" type="anyURI" use="required">
      <xsd:annotation>
        <xsd:documentation>
          The icon URI.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="rtl-uri" type="anyURI">
      <xsd:annotation>
        <xsd:documentation>
          The URI for the right-to-left version of the icon. If the
          <html:code>
            rtl-uri
          </html:code>
          attribute is not specified, the
          <html:code>
            uri
          </html:code>
          attribute value will be used for both left-to-right and right-to-left
          reading directions.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="width" type="positiveInteger">
      <xsd:annotation>
        <xsd:documentation>
          The width of the image icon.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="height" type="positiveInteger">
      <xsd:annotation>
        <xsd:documentation>
          The height of the image icon.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="styleClass" type="string">
      <xsd:annotation>
        <xsd:documentation>
          A style class which is applied to the icon image.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="textIconType">
    <xsd:sequence minOccurs="0">
      <xsd:element ref="skin:inlineStyle" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
            The inline style for the icon.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="text" type="string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          The icon's text.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="styleClass" type="string">
      <xsd:annotation>
        <xsd:documentation>
          A style class which is applied to the text of the icon.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="instanceIconType">
    <xsd:attribute name="class" type="string" use="required">
      <xsd:annotation>
        <xsd:documentation>
          Full Java class name of the Icon (or the class which provides the Icon
          via a static method).
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="method" type="string">
      <xsd:annotation>
        <xsd:documentation>
          Full name of the static method to call. If not set, we will first look
          for a method named "sharedInstance()", and second try to call a
          default constructor.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="nullIconType"/>
  <xsd:complexType name="referenceIconType">
    <xsd:attribute name="name" use="required" type="string">
      <xsd:annotation>
        <xsd:documentation>
          The fully qualified class name of the
          <html:code>
            ResourceBundle
          </html:code>
          that is being registered.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  
  
  <xsd:complexType name="propertyType">
    <xsd:sequence>
      <xsd:element name="name" type="string" minOccurs="1" maxOccurs="1">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              name of the property
            </cabotool:summary>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="value" type="string"  minOccurs="1" maxOccurs="1">
        <xsd:annotation>
          <xsd:documentation>
            <cabotool:summary>
              value of the property
            </cabotool:summary>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:element>      
    </xsd:sequence>
  </xsd:complexType>
  
  
  <xsd:element name="inlineStyle">
    <xsd:annotation>
      <xsd:documentation>
        <cabotool:summary>
          Defines an inline CSS style that is applied to the icon's text.
        </cabotool:summary>
        <cabotool:description>
          <html:p>
            The inlineStyle element allows any number of CSS properties to be
            applied to the icon's text via nested property elements.
          </html:p>
        </cabotool:description>
        <cabotool:example>
          <html:p>
            The following sample shows how to apply an inline CSS style to a
            text icon..
          </html:p>
          <cabotool:sampleCode>
            &lt;!-- Replace the required icon with a styled text icon. --&gt;
            &lt;icon name="ui:required"&gt; &lt;text text="*"&gt;
            &lt;inlineStyle&gt; &lt;property name="color"&gt;red&lt;/property&gt;
            &lt;property name="font-weight"&gt;bold&lt;/property&gt;
            &lt;/inlineStyle&gt; &lt;/text&gt; &lt;/icon&gt;
          </cabotool:sampleCode>
        </cabotool:example>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>


